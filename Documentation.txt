INTERN NSS MANAGEMENT SYSTEM

Introduction
- Problem Statement: Many institutions still rely on paper-based files or scattered spreadsheets to manage Intern and NSS personnel records. This manual approach is slow, error-prone, and difficult to audit. Files get misplaced, duplicate entries creep in, and generating reports (by institution, status, or time period) takes hours instead of seconds. Collaboration is limited because data is not centralized, and there is little control over access or change history.
- Goal: Deliver a modern, centralized system that streamlines the entire lifecycle of Intern and NSS data management. With a secure admin login and a clean, responsive UI, the system enables fast onboarding, accurate updates, and instant retrieval of records. Data is validated, stored reliably in MySQL, and exposed via a lightweight PHP API. The result is fewer errors, better visibility, and a professional, future-proof foundation that can be extended with analytics, roles/permissions, and integrations.

How To Use
- Requirements:
  - XAMPP installed and running (Apache + MySQL).
  - phpMyAdmin accessible at http://localhost/phpmyadmin.
  - Node.js (for the React frontend dev server).
- Start Backend (once per session):
  1) Ensure Apache and MySQL are running in XAMPP.
  2) Database created via phpMyAdmin (use provided schema) and admin seeded.
  3) Backend is served from http://localhost/server/public (server folder in XAMPP htdocs).
- Start Frontend:
  - Click the Start App icon in the project (if present) to launch the React dev server, or run the dev command (e.g., npm run dev) and open the shown URL (e.g., http://localhost:5173).
- Login:
  - Navigate to the app URL and sign in with the admin credentials you seeded.
- Manage Records:
  - Interns: list, create, and update.
  - NSS: list, create, and update.
  - Use the search box to find by name or institution; use FilterBar for additional filters.

Stack Used
- Frontend: React, TypeScript, Tailwind CSS (utility classes), React Router.
- Backend: PHP (XAMPP/Apache), native routing, PDO for MySQL, JSON REST endpoints.
- Database: MySQL (managed via phpMyAdmin).
- Other tools: Git for version control, Postman/Insomnia for API testing, Vite (or similar dev server) for local development.

Frequently Asked Questions (FAQ)
- What is the size of the phpMyAdmin (MySQL) DB?
  - The schema itself is tiny (typically <1 MB). Actual size scales with records. Even thousands of records usually remain in the low MBs. Backups (SQL dumps) compress very well.
- Why React?
  - Component-driven UI, large ecosystem, and excellent developer tooling for fast, interactive tables, forms, and filtering.
- Why TypeScript?
  - Static typing reduces runtime errors, improves refactoring safety, and encodes domain types (Intern vs NSS) directly in code.
- Why PHP + MySQL (XAMPP)?
  - Easy local setup, phpMyAdmin for quick DB management, ubiquitous hosting environments, and stable performance for CRUD-focused apps.
- How is authentication handled?
  - Simple admin session using PHP sessions. Login sets a session cookie; protected endpoints require that session. Only one admin user by design.
- How are CORS and cookies handled in development?
  - The backend sends Access-Control-Allow-Origin and credentials headers for the React dev origin. Frontend requests include credentials to carry the session cookie.
- Can I add delete operations or more roles later?
  - Yes. The API and DB are structured so DELETE endpoints and role-based access can be added without major rewrites.
- How are dates stored?
  - Stored as DATE in MySQL, returned to the frontend as ISO (YYYY-MM-DD). The UI can display them in any format.

Features
- Single admin login for secure access
- Manage Interns: list, create, update
- Manage NSS: list, create, update
- Powerful search by name or institution
- Filter by status, institution, level (interns), interest, and date
- Clean table views with edit actions
- Typed frontend models (TypeScript) for safer code
- MySQL storage with basic indexing for performance
- Simple REST API (PHP + PDO) with session-based auth
